============================================================
              EXPRESS + POSTGRES BACKEND GUIDE
============================================================

# **1️⃣ `index.js` (Main Server File)**
### **Purpose:** This is the entry point of your backend.

```js
import express from 'express';
import cors from 'cors';
import clientRoutes from "./routes/clientRoute.js";

const app = express();
const port = 3000;

app.use(cors()); // Allows frontend to call backend
app.use(express.json()); // Lets backend read JSON data from requests

app.use('/api', clientRoutes); // Uses clientRoutes for handling `/api/*` requests

app.listen(port, () => {
    console.log("Listening on port 3000");
});
```

### **Functionality:**
✅ Creates an **Express server**
✅ Uses `cors()` so the frontend can call APIs from a different origin
✅ Uses `express.json()` to handle JSON requests
✅ Loads `clientRoutes.js` file to handle API routes
✅ Starts the server on port **3000**

============================================================

# **2️⃣ `db.js` (Database Connection)**
### **Purpose:** This file connects to PostgreSQL and allows queries.

```js
import pg from "pg";
import env from "dotenv";

const db = new pg.Client({
    user: 'postgres',
    host: 'localhost',
    database: 'client_db',
    password: 'Shajeera@1981',
    port: 5432,
});

db.connect();

db.on('error', (err) => {
    console.error('Unexpected error on idle client', err);
});

export const query = (text, params) => db.query(text, params);
```

### **Functionality:**
✅ Connects to **PostgreSQL** using `pg.Client()`
✅ Stores database details (username, password, host, etc.)
✅ Defines `query()` function to **run SQL queries**
✅ Handles **unexpected database errors**

============================================================

# **3️⃣ `clientServices.js` (Database Queries)**
### **Purpose:** This file runs SQL queries to fetch data from PostgreSQL.

```js
import { query } from "../db.js";

export const getClients = async () => {
    const { rows } = await query('SELECT * FROM clients');
    return rows;
};
```

### **Functionality:**
✅ Uses `query()` function from `db.js`
✅ Runs SQL command: **`SELECT * FROM clients`**
✅ Returns all client data in JSON format

============================================================

# **4️⃣ `clientController.js` (Handles API Requests)**
### **Purpose:** This file handles API requests and sends responses to frontend.

```js
import * as clientService from "../services/clientServices.js";

export const getClients = async (req, res) => {
    try {
        const clients = await clientService.getClients();
        res.status(200).json(clients);
    } catch (err) {
        console.error('Error fetching clients:', err);
        res.status(500).json({ message: "Internal Server Error" });
    }
};
```

### **Functionality:**
✅ Calls `getClients()` from `clientServices.js`
✅ If successful, **sends client data as JSON** (`res.json(clients)`)
✅ If there's an error, **returns a 500 error message**

============================================================

# **5️⃣ `clientRoutes.js` (Defines API Endpoints)**
### **Purpose:** This file defines API endpoints.

```js
import express from "express";
import * as clientController from '../controllers/clientController.js';

const router = express.Router();

router.get('/clients', clientController.getClients);

export default router;
```

### **Functionality:**
✅ Uses **Express Router** to handle API routes
✅ Defines `GET /api/clients` → Calls `getClients()`
✅ Exports the router so `index.js` can use it

============================================================

# **🛠 Backend Flow:**
1️⃣ **User opens frontend** → It makes a request to `http://localhost:3000/api/clients`  
2️⃣ `index.js` **routes the request to `clientRoutes.js`**  
3️⃣ `clientRoutes.js` **calls `clientController.getClients()`**  
4️⃣ `clientController.js` **calls `clientServices.getClients()`**  
5️⃣ `clientServices.js` **runs the SQL query and gets data**  
6️⃣ `clientController.js` **sends the data back to the frontend**  
7️⃣ **Browser displays the JSON data** 🎉  

============================================================

# **🔍 Example API Request (Using Postman or Browser)**
Try opening:  
👉 `http://localhost:3000/api/clients`

### **Expected Response (Example JSON Data)**
```json
[
  { "id": 1, "name": "John Doe", "email": "john@example.com", "job": "Developer", "rate": 5000.00, "isactive": true },
  { "id": 2, "name": "Jane Smith", "email": "jane@example.com", "job": "Designer", "rate": 4500.50, "isactive": false }
]
```

============================================================

# **🔥 Final Notes:**
🚀 **You're now running a backend API with Express and PostgreSQL!**  
💡 **This structure is similar to professional-grade applications**  
🔥 **You now understand API development step by step!**  

**What’s next?**
- Want to **add more endpoints** (like `POST`, `PUT`, `DELETE`)?
- Want to **connect this backend to a React frontend**?

Let me know! I'll guide you step by step. **You got this!** 💪🚀
